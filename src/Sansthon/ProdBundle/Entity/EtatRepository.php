<?php

namespace Sansthon\ProdBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EtatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtatRepository extends EntityRepository
{
  /***
   * Cancel current Etat
   *
   *
   *
   */

  public function cancel($etat) {
    /* onrecupere l'etat*/
    //$etat = $this->find($id);
    if($etat->getStocked() and $etat->getFin()){
        $stock= $this->_em->getRepository("SansthonProdBundle:Stock")->getByEtapeAndType($etat->getEtape(),$etat->getType());    
        $stock->subValue($etat->getQuantite());
        $etat->setStocked(false)->setFin(null);
    }else {
    if($etat->getEtapeorigine()){
      $stockorigin= $this->_em->getRepository("SansthonProdBundle:Stock")->getByEtapeAndType($etat->getEtapeorigine(),$etat->getType());
      $stockorigin->addValue($etat->getQuantite());
    }
   /* quantie refaite suppression de l'etat*/
    $this->_em->remove($etat);
    }
    $this->_em->flush();
  }
  
  public function getSumUnstocked(){
      /*SELECT * , SUM( quantite ) 
FROM  `etat` 
WHERE stocked !=1
AND fin IS NULL 
GROUP BY etape_id, type_id
LIMIT 0 , 30*/
      
      $tabSum=array();
    $query = $this->_em
        ->createQuery('
            SELECT sum(s.quantite) as quantite,e.id as etape ,t.id as type 
            FROM SansthonProdBundle:Etat s
            JOIN s.etape e
            JOIN s.type t
            WHERE s.stocked != 1 and s.fin is null and MOD(e.displayorder,2) = 0
            GROUP BY t.id,e.id
            ORDER BY t.reference,e.displayorder'
        );
    $etats =$query->getArrayResult();
    foreach($etats as $etat){
        if(!array_key_exists($etat['type'], $tabSum))
        {
            $tabSum[$etat['type']]=array();
        }
        $tabSum[$etat['type']][$etat["etape"]] = $etat['quantite'];
        
    }
      return $tabSum;
  }
}
